#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('drkodirov.uz-server:server');
const https = require('https');
const fs = require('fs');
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const dataLoader = require('../src/component/dataLoader');
dotenv.config();

// Sertifikat fayllar
const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/api.drkodirov.uz/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/api.drkodirov.uz/fullchain.pem'),
};

// Port
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// MongoDB ulanish va HTTPS serverni ishga tushurish
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  connectTimeoutMS: 30000,
}).then(() => {
  https.createServer(options, app).listen(port, () => {
    console.log(`âœ… HTTPS server running on port ${port}`);
    dataLoader.createCEO();
    console.log("Mongo connect");
  });
}).catch(err => {
  console.error('MongoDB ulanishda xatolik:', err);
  process.exit(1);
});

// Portni normal holatga keltirish
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
